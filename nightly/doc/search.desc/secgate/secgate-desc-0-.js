searchState.loadedDescShard("secgate", 0, "Arguments that will be passed to the secure call. Concrete …\nAn auto trait that limits the types that can be send …\nNon-generic and non-pointer-based SecGateInfo, for use …\nReturn value to be filled by the secure call. Concrete …\nMinimum alignment of secure trampolines.\nA struct of information about a secure gate. These are …\nEnsures that the data is filled out (may read thread ID …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA pointer to the implementation entry function. This must …\nA pointer to the implementation entry function. This must …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf a previous call to set is made, or this was constructed …\nConstruct a new, uninitialized Self.\nRequired to put in your source if you call any secure …\nSet the inner value. Future call to into_inner will return …\nGet the ID of the source context, or None if the call was …\nGet the ID of the calling thread.\nA set of utility types for low-level communication between …\nAllocate a new GateCallInfo on the stack for the closure.\nA handle descriptor.\nA handle that can be opened and released.\nA manager for open handles, per compartment.\nThe error type returned by open.\nThe arguments to open.\nA simple buffer to use for transferring bytes between …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the underlying object handle.\nInsert new server data, and return a descriptor for it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLookup the server data associated with a descriptor.\nLookup the server data associated with a descriptor.\nGet the maximum number of open handles.\nReturns the maximum length of a read or write.\nBuild a new SimpleBuffer from an object handle.\nConstruct a new HandleMgr.\nOpen a handle.\nGet the number of currently open handles for a given …\nRead bytes from the SimpleBuffer into <code>buffer</code>, up to the …\nRelease a handle. After this, the handle should not be …\nRemove a descriptor, returning the server data if present.\nGet the total number of open handles across all …\nWrite bytes from <code>buffer</code> into the SimpleBuffer, up to the …\nWrite bytes from <code>buffer</code> into the SimpleBuffer at provided …")