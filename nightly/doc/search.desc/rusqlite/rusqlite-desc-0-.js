searchState.loadedDescShard("rusqlite", 0, "Rusqlite is an ergonomic wrapper for using SQLite from …\nAn iterator over the mapped resulting rows of a query, …\nLibrary used incorrectly\nA database that has been attached via “ATTACH DATABASE …\nAuthorization denied\nEquivalent to <code>SQLITE_STMTSTATUS_AUTOINDEX</code>\nBatch fallible iterator\nOptim\nCacheable statement.\nUnable to open the database file\nCommit the changes.\nA connection to a SQLite database.\nAbort due to constraint violation\nThe database file is locked\nThe database disk image is malformed\nA table in the database is locked\nName for a database within a SQLite connection.\nDEFERRED means that the transaction does not actually …\nInsertion failed because database is full\nOptions for how a Transaction or Savepoint should behave …\nContains the error value\nEnum listing possible errors from rusqlite.\nError Codes\nEXCLUSIVE prevents other database connections from reading …\nError returned when an <code>execute</code> call returns rows.\nDatabase lock protocol error\nEquivalent to <code>SQLITE_STMTSTATUS_FILTER_HIT</code>\nEquivalent to <code>SQLITE_STMTSTATUS_FILTER_MISS</code>\nError when the value of a particular column is requested, …\nEquivalent to <code>SQLITE_STMTSTATUS_FULLSCAN_STEP</code>\nAn error returned when <code>Context::get_aux</code> attempts to …\nDo not commit or roll back changes - this will leave the …\nIMMEDIATE cause the database connection to start a new …\nError when SQLite gives us an integral value outside the …\nInternal logic error in SQLite\nAllows interrupting a long-running computation.\nError when the value of a particular column is requested, …\nError when the value of a named column is requested, but …\nError when the value of a particular column is requested, …\nError when the schema of a particular database is …\nError returned by <code>vtab::Values::get</code> when the filter …\nError returned by <code>functions::Context::get</code> when the …\nError when the number of bound parameters does not match …\nError when using SQL named parameters and passing a …\nError converting a file path to a string.\nError when the SQL is not a <code>SELECT</code>, is not read-only.\nShorthand for <code>DatabaseName::Main</code>.\nThe main database.\n<code>F</code> is used to transform the <em>streaming</em> iterator into a …\nAn iterator over the mapped resulting rows of a query.\nEquivalent to <code>SQLITE_STMTSTATUS_MEMUSED</code> (3.20.0)\nAn error case available for implementors of custom modules …\nError when the SQL contains multiple statements.\nUses OS features not supported on host\nEquivalent to <code>SQLITE_TXN_NONE</code>\nFile opened that is not a database file\nUnknown opcode in <code>sqlite3_file_control()</code>\nError converting a string to a C-compatible string because …\nContains the success value\nFlags for opening SQLite database connections. See …\nCallback routine requested an abort\nOperation terminated by <code>sqlite3_interrupt()</code>\nSee the method documentation.\nA <code>malloc()</code> failed\nPanic. Used to enforce intentional behavior during …\n2nd parameter to <code>sqlite3_bind</code> out of range\nTrait used for sets of parameter passed into SQL …\nAdapter type which allows any iterator over <code>ToSql</code> values …\nAccess permission denied\nPrepare flags. See sqlite3_prepare_v3 for details.\nError when a query that was expected to return at least …\nEquivalent to <code>SQLITE_STMTSTATUS_REPREPARE</code> (3.20.0)\nEquivalent to <code>SQLITE_TXN_READ</code>\nAttempt to write a readonly database\nA typedef of the result returned by many methods.\nRoll back the changes. This is the default.\nA single result row of a query.\nA trait implemented by types that can index into columns …\nA handle (lazy fallible streaming iterator) for the …\nEquivalent to <code>SQLITE_STMTSTATUS_RUN</code> (3.20.0)\nThe database is created if it does not already exist\nExtended result codes. (3.37.0)\nThe new database connection will use a per-connection …\nThe database will be opened as an in-memory database.\nThe database filename is not allowed to be a symbolic …\nThe new database connection will not use a per-connection …\nThe database is opened shared cache disabled.\nThe database is opened in read-only mode. If the database …\nThe database is opened for reading and writing if possible,\nThe database is opened with shared cache enabled.\nThe filename can be interpreted as a URI if this flag is …\nPrevents SQL compiler errors from being sent to the error …\nCauses the SQL compiler to return an error (error code …\nA hint to the query planner that the prepared statement …\nRepresents a savepoint on a database connection.\nThe database schema changed\nEquivalent to <code>SQLITE_STMTSTATUS_SORT</code>\nError referencing a specific token in the input SQL\nAn error from an underlying SQLite call.\nError reported when attempting to open a connection when …\nA prepared statement.\nError when a query that was expected to insert one row did …\nPrepared statement status counters.\nSome kind of disk I/O error occurred\nShorthand for <code>DatabaseName::Temp</code>.\nThe temporary database (e.g., any “CREATE TEMPORARY TABLE…\nError available for the implementors of the <code>ToSql</code> trait.\nString or BLOB exceeds size limit\nRepresents a transaction on a database connection.\nOptions for transaction behavior. See BEGIN TRANSACTION …\nTransaction state of a database\nData type mismatch\nSQL error or missing database\nAn unwinding panic occurs in a UDF (user-defined function).\nAn error case available for implementors of custom user …\nError converting a string to UTF-8.\nEquivalent to <code>SQLITE_STMTSTATUS_VM_STEP</code>\nEquivalent to <code>SQLITE_TXN_WRITE</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMap over this <code>Rows</code> with a fallible function, converting it …\nGive access to the underlying statement\nAutomatic extension loading\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRegister a callback to handle <code>SQLITE_BUSY</code> errors.\nSet a busy handler that sleeps for a specified amount of …\nFlush caches to disk mid-transaction\nReturn the number of rows modified, inserted or deleted by …\nReset all bindings\nClose the SQLite connection.\nReturn the number of columns in the result set returned by …\nReturns the column index in the result set for a given …\nReturns the name assigned to a particular column in the …\nGet all the column names in the result set of the prepared …\nA convenience method which consumes and commits a …\nA convenience method which consumes and commits a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConfigure database connections\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nAttach a user-defined aggregate function to this database …\nRegister a virtual table implementation.\nAttach a user-defined scalar function to this database …\nReturns the current value of a <code>config</code>.\nReturn the schema name for a database connection\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDiscard the statement, preventing it from being returned …\nGet the current setting for what happens to the …\nGet the current setting for what happens to the savepoint …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nExecute the prepared statement.\nConvenience method to prepare and execute a single SQL …\nConvenience method to run multiple SQL statements (that …\nReturn <code>true</code> if a query in the SQL statement it executes …\nReturns a string containing the SQL text of prepared …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConsumes the statement.\nConsumes the transaction, committing or rolling back …\nConsumes the savepoint, committing or rolling back …\nRemove/finalize all prepared statements currently in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreate a <code>Connection</code> from a raw handle.\nCreate a <code>Connection</code> from a raw owned handle.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreate or redefine SQL functions.\nGet the value of a particular column of the result row.\nGet access to a handle that can be used to interrupt …\nGet the value of a particular column of the result row as …\nGet the value of a particular column of the result row as …\nGet the value for one of the status counters for this …\nGet the value of a particular column of the result row.\nGet access to the underlying SQLite database connection …\nReturns the index of the appropriate column, or <code>None</code> if no …\nExecute an INSERT and return the ROWID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInterrupt the query currently executing on another thread. …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nTest for auto-commit mode. Autocommit mode is on by …\nDetermine if all associated prepared statements have been …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns 1 if the prepared statement is an EXPLAIN …\nDetermine whether an interrupt is currently in effect\nDetermine if a database is read-only\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the SQLite rowid of the most recent successful INSERT.\nMap over this <code>Rows</code>, converting it to a <code>Map</code>, which …\nMap over this <code>Rows</code>, converting it to a <code>MappedRows</code>, which …\nA macro making it more convenient to pass lists of named …\nBegin a new transaction. Cannot be nested; see <code>savepoint</code> …\nBegin a new savepoint. Can be nested.\nConstructor\nBegin a new transaction, failing if a transaction is open.\nAttempt to get the next row from the query. Returns …\nIterates on each batch statements.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOpen a new connection to a SQLite database. If a database …\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database.\nOpen a new connection to an in-memory SQLite database …\nOpen a new connection to a SQLite database.\nOpen a new connection to a SQLite database using the …\nConverts a <code>Result&lt;T&gt;</code> into a <code>Result&lt;Option&lt;T&gt;&gt;</code>.\nReturn the number of parameters that can be bound to this …\nReturn the (one-based) index of an SQL parameter given its …\nReturn the SQL parameter name given its (one-based) index …\nA macro making it more convenient to pass longer lists of …\nConstructor function for a <code>ParamsFromIter</code>. See its …\nReturns the path to the database file, if one exists and …\nQuery the current value(s) of <code>pragma_name</code> associated to …\nQuery the current rows/values of <code>pragma_name</code>.\nQuery the current value of <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code>.\nSet a new value to <code>pragma_name</code> and return the updated …\nPrepare a SQL statement for execution.\nPrepare a SQL statement for execution, returning a …\nPrepare a SQL statement for execution.\nExecute the prepared statement, returning a handle to the …\nExecutes the prepared statement and maps a function over …\nExecutes the prepared statement and maps a function over …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nConvenience method to execute a query that is expected to …\nLow level API to directly bind a parameter to a given …\nLow level API to execute a statement given that all …\nLow level API to get <code>Rows</code> for this query given that all …\nReturns true if the statement is read only.\nAttempts to free as much heap memory as possible from the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRemoves a user-defined function from this database …\nReset the value of one of the status counters for this …\nA convenience method which consumes and rolls back a …\nA convenience method which rolls back a savepoint.\nBegin a new savepoint with the default behavior (DEFERRED).\nStarts a new savepoint, allowing nested transactions.\nBegin a nested savepoint.\nBegin a new savepoint with a specified name.\nCreate a new savepoint with a custom savepoint name. See …\nBegin a nested savepoint with a user-provided savepoint …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nMake configuration changes to a database connection\nConfigure the transaction to perform the specified action …\nConfigure the savepoint to perform the specified action …\nSet the maximum number of cached prepared statements this …\nSet the default transaction behavior for the connection.\nSets up the Twizzler virtual table module for this …\nReturns the underlying SQLite error if this is …\nReturns the underlying SQLite error code if this is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTransform Rust error to SQLite error (message and code).\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturn the total number of rows modified, inserted or …\nBegin a new transaction with the default behavior …\nDetermine the transaction state of a database\nBegin a new transaction with a specified behavior.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nTraits dealing with SQLite data types.\nBegin a new transaction with the default behavior …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the SQLite version as a string; e.g., <code>&quot;3.16.2&quot;</code> for …\nReturns the SQLite version as an integer; e.g., <code>3016002</code> …\nCreate virtual tables.\nBegin a new savepoint with a user-provided savepoint name.\nerror code\nerror message\nbyte offset of the start of invalid token\nSQL input\nAutomatic extension initialization routine\nRaw automatic extension initialization routine\nUnregister the initialization routine\nBridge between <code>RawAutoExtension</code> and <code>AutoExtension</code>\nRegister au auto-extension\nDisable all automatic extensions previously registered\nDatabase Connection Configuration Options See Database …\nActivates or deactivates the “defensive” flag for a …\nActivates or deactivates the legacy double-quoted string …\nActivates or deactivates the legacy double-quoted string …\nEnable or disable the enforcement of foreign key …\nEnable or disable the <code>fts3_tokenizer()</code> function which is …\nActivates or deactivates the query planner stability …\nEnable or disable triggers.\nEnable or disable views.\nActivates or deactivates the legacy behavior of the ALTER …\nActivates or deactivates the legacy file format flag.\nIn WAL mode, enable or disable the checkpoint operation …\nActivates or deactivates the “reset” flag for a …\nChanges the default order in which tables and indexes are …\nSets or clears a flag that enables collection of the …\nIncludes or excludes output for any operations performed …\nTells SQLite to assume that database schemas (the contents …\nActivates or deactivates the <code>writable_schema</code> flag.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAggregate is the callback interface for user-defined …\nA reference to a connection handle with a lifetime bound …\nContext is a wrapper for the SQLite function evaluation …\nFunction Flags. See sqlite3_create_function and Function …\nNo value.\nMeans that the function always gives the same output when …\nMeans that the function may only be invoked from top-level …\nMeans that the function is unlikely to cause problems even …\nIndicates to SQLite that a function might call …\nIndicates that the function is an aggregate that …\nIndicates to SQLite that a function may call …\nSpecifies UTF-16 using native byte order as the text …\nSpecifies UTF-16 using big-endian byte order as the text …\nSpecifies UTF-16 using little-endian byte order as the …\nSpecifies UTF-8 as the text encoding this SQL function …\nSome value of type <code>T</code>.\nn-th arg of an SQL scalar function\nResult of an SQL function\nSubtype of an SQL function\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nComputes and returns the final result. Will be called …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns the <code>idx</code>th argument as a <code>T</code>.\nReturns the <code>idx</code>th argument as a <code>SqlFnArg</code>. To be used when …\nGets the auxiliary data that was associated with a given …\nGet the db connection handle via sqlite3_context_db_handle\nFetch or insert the auxiliary data associated with a …\nReturns the <code>idx</code>th argument as a <code>ValueRef</code>.\nReturns the subtype of <code>idx</code>th argument.\nInitializes the aggregation context. Will be called prior …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> when there is no argument.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the number of arguments to the function.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the auxiliary data associated with a particular …\n“step” function called once for each row in an …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts Rust value to SQLite value with an optional …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nn-th arg of an SQL scalar function\nThe value is a blob of data\nThe value is a blob of data\nBLOB\nA borrowed SQLite-representable value.\nContains the error value\nA trait for types that can be created from a SQLite value.\nEnum listing possible errors from <code>FromSql</code> trait.\nResult type for implementors of the <code>FromSql</code> trait.\nThe value is a signed integer.\nThe value is a signed integer.\n64-bit signed integer\nError when the blob result returned by SQLite cannot be …\nError when an SQLite value is requested, but the type of …\nEmpty struct that can be used to fill in a query parameter …\nThe value is a <code>NULL</code> value.\nThe value is a <code>NULL</code> value.\nNULL\nContains the success value\nAn error case available for implementors of the <code>FromSql</code> …\nError when the i64 value returned by SQLite cannot be …\nAn owned SQLite-representable value.\nThe value is a floating point number.\nThe value is a floating point number.\n64-bit IEEE floating point number\nThe value is a text string.\nThe value is a text string.\nString\nA trait for types that can be converted into SQLite …\n<code>ToSqlOutput</code> represents the possible output types for …\nSQLite data types. See Fundamental Datatypes.\nOwning dynamic type value. Value’s type is typically …\nA non-owning dynamic type value. Typically, the memory …\nIf <code>self</code> is case <code>Blob</code>, returns the byte slice. Otherwise, …\nIf <code>self</code> is case <code>Null</code> returns None. If <code>self</code> is case <code>Blob</code>, …\nReturns the byte slice that makes up this <code>ValueRef</code> if it’…\nIf <code>self</code> is case <code>Null</code> returns None. If <code>self</code> is …\nIf <code>self</code> is case <code>Real</code>, returns the floating point value. …\nIf <code>self</code> is case <code>Null</code> returns None. If <code>self</code> is case <code>Real</code>, …\nIf <code>self</code> is case <code>Integer</code>, returns the integral value. …\nIf <code>self</code> is case <code>Null</code> returns None. If <code>self</code> is case <code>Integer</code>…\nIf <code>self</code> is case <code>Text</code>, returns the string value. Otherwise, …\nIf <code>self</code> is case <code>Null</code> returns None. If <code>self</code> is case <code>Text</code>, …\nConverts SQLite value into Rust value.\nReturns SQLite fundamental datatype.\nReturns SQLite fundamental datatype.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts Rust value to SQLite value\nThe actual size of the blob that was returned.\nThe expected size of the blob.\nClient data passed to <code>Connection::create_module</code>.\nEquivalent to <code>SQLITE_VTAB_CONSTRAINT_SUPPORT</code>\nContext is used by <code>VTabCursor::column</code> to specify the cell …\nRead-only virtual table instance trait.\nSpecific cursor implementation\nNon-eponymous\nEquivalent to <code>SQLITE_VTAB_DIRECTONLY</code>\n<code>create</code> == <code>connect</code>\nNo <code>create</code> / <code>destroy</code> or not used\nWHERE clause constraint.\nIterate on index constraint and its associated usage.\n<code>feature = &quot;vtab&quot;</code>\nIndex constraint operator. See Virtual Table Constraint …\nInformation about what parameters to pass to …\nVirtual table scan flags See Function Flags for details.\nPass information into and receive the reply from the …\nEquivalent to <code>SQLITE_VTAB_INNOCUOUS</code>\nFor <code>EponymousOnly</code>, <code>create</code> and <code>destroy</code> are not called\nVirtual table module\nDefault\nA column of the ORDER BY clause.\n<code>feature = &quot;vtab&quot;</code>\nDisplay idxNum as hex in EXPLAIN QUERY PLAN\nScan visits at most 1 row.\nWritable virtual table instance trait with transaction …\nWritable virtual table instance trait.\nEquivalent to <code>SQLITE_VTAB_USES_ALL_SCHEMAS</code>\nEponymous-only virtual table instance trait.\nVirtual table configuration options\n<code>feature = &quot;vtab&quot;</code>\nVirtual table cursor trait.\nVirtual table kind\n<code>Values</code> iterator.\nWrapper to <code>VTabCursor::filter</code> arguments, the values …\nGet a flags value with all known bits set.\nStart a transaction\nDetermine the best way to access the virtual table. (See …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMask of columns used by statement\nDetermine the collation for a virtual table constraint\nFind the value for the <code>i</code>-th column of the current row. <code>i</code> …\nColumn constrained.  -1 for ROWID\nColumn number\nCommit the current transaction\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConfigure various facets of the virtual table interface\nEstablish a new connection to an existing virtual table.\nInformation about what parameters to pass to …\nRecord WHERE clause constraints.\nIterate on index constraint and its associated usage.\nWhether all set bits in a source flags value are also set …\nCreate a new instance of a virtual table in response to a …\nDelete rowid or PK\nDequote string\nDestroy the underlying table implementation. This method …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nMust return <code>false</code> if the cursor currently points to a …\nCreate an eponymous only virtual table implementation.\nEscape double-quote (<code>&quot;</code>) character occurrences by doubling …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nBegin a search of a virtual table. (See SQLite doc)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns value at <code>idx</code>\nGet access to the underlying SQLite database connection …\nInsert: …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if there is no value.\nWhether all bits in this flags value are unset.\nTrue for DESC.  False for ASC.\nTrue if this constraint is usable\nTurns <code>Values</code> into an iterator.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the number of values.\nAdvance cursor to the next row of a result set initiated by\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nNumber of terms in the ORDER BY clause\nCreate a new cursor used for accessing a virtual table. …\nConstraint operator\nInformation about the ORDER BY clause.\n<code>&lt;param_name&gt;=[&#39;&quot;]?&lt;param_value&gt;[&#39;&quot;]?</code> =&gt; …\nThe boolean can be one of:\nCreate a read-only virtual table implementation.\nThe intersection of a source flags value with the …\nAbandon the transaction\nReturn the rowid of row that the cursor is currently …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nif <code>argv_index</code> &gt; 0, constraint is part of argv to …\nEstimated cost of using this index\nEstimated number of rows returned.\nMask of <code>SQLITE_INDEX_SCAN_*</code> flags.\nNumber used to identify the index\nString used to identify the index\nif <code>omit</code>, do not code a test for this constraint\nTrue if output is already ordered\nSet current cell value\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBegin two-phase commit\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpdate: …\nCreate a modifiable virtual table implementation.\nCreate a modifiable virtual table implementation with …")