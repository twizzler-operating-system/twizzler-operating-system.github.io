searchState.loadedDescShard("twizzler_object", 0, "The twizzler-object crate.\nPossible object creation errors.\nA builder-pattern type for making a new object.\nExec allowed.\nThe ID isn’t valid.\nThe requested protections are invalid.\nThe mapping failed.\nThe number of u64 components that make up an object ID, if …\nAn object ID.\nA handle for an object with base type T.\nPossible errors from initializing an object handle.\nFlags to pass to object initialization routines.\nThe object doesn’t exist.\nThere are not enough memory slots.\nMapping protections for mapping objects into the address …\nRead allowed.\nWrite allowed.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nRead the raw value.\nGet a reference to the base of an object. Checks to see if …\nGet a mutable reference to the base of an object, …\nGet a reference to the base of an object, bypassing …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nCreate an object, setting up the initial value for base …\nCreate an object, setting up the initial value for the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nBuild an object ID from parts, useful for syscalls.\nGet a mutable pointer to one of the object’s FOT entries.\nGet the ID of this object.\nInitialize an object handle from an object ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nSet the public key ID for this new object.\nGet a mutable reference to the object’s meta info struct.\nGet the meta flags of the object.\nGet the public key ID of the object.\nGet the nonce of the object.\nGet the base tag of the object.\nGet the base version of the object.\nGet a mutable reference to the object’s first meta …\nConstruct a basic CreateSpec.\nBuild a new object ID from raw.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSplit the object ID into parts, useful for packing into …\nGet the raw object ID type.\nGet a raw pointer into an object given an offset.\nGet a raw mutable pointer into an object given an offset.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet the slot of this object.\nAdd a source for object creation.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAdd a tie to another object.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTransmute the object of base type T to base type N.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTag for a base type. Each base type must have a unique tag.\nTrait that all base types must implement.\nVersion for a base type.\nThis auto trait specifies that some type is “safe” to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new base type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of valid tags and versions for this type.\nAn entry in the FOT.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn atomic invariant pointer. Allows reading through an …\nThe raw invariant pointer, containing just a 64-bit packed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an InvPtr from an FOT entry and an offset.\nConstruct an InvPtr from an FOT entry and an offset.\nGet a reference to the inner raw 64 bits of the invariant …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an invariant pointer is null.\nCheck if an invariant pointer is null.\nCheck if an invariant pointer is null.\nConstruct a null raw pointer.\nConstruct a null raw pointer.\nRead the invariant pointer into its raw parts.\nRead the invariant pointer into its raw parts.\nRead the invariant pointer into its raw parts.\nGet a reference to the inner raw 64 bits of the invariant …\nA slot for an object in active memory. All unique …\nReturns the argument unchanged.\nGet a slot for an object and protections combo.\nGet a mutable pointer to one of the slot’s object’s …\nGet the ID of the object in this slot.\nCalls <code>U::from(self)</code>.\nGet the protections of this slot.\nPerform a raw load-effective-address for an offset into a …\nPerform a raw load-effective-address for an offset into a …\nGet the vaddr of this slot’s object base.\nGet the vaddr of this slot’s object’s meta page.\nGet the vaddr of this slot’s object’s null page.")