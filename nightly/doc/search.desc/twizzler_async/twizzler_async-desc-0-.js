searchState.loadedDescShard("twizzler_async", 0, "Support for asynchronous programming on Twizzler. This …\nA wrapper type around some “handle” that we want to …\nA wrapper type around some “handle” that we want to …\nImplement setting up externally signaled asynchronous …\nImplement setting up externally signaled asynchronous …\nThe error type returned by any closures run.\nA basic condition variable for async tasks. If you call …\nThe specific variant of the error type that indicates that …\nThe error type returned by read operations.\nA spawned future. Tasks are futures themselves and yield …\nA timer future that returns after a specified period of …\nThe specific variant of the error type that indicates that …\nThe specific variant of the error type that indicates that …\nThe error type returned by write operations.\nMake a new timer future that returns Ready after a …\nMake a new timer future that returns Ready at or after a …\nRun a future to completion, sleeping the thread if there …\nCancels the task and waits for it to stop running. If the …\nDetach the task and let it run in the background.\nSpawns a new task and awaits and unwraps the result, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the underlying handle.\nReturn a reference to the underlying handle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the wrapper and return the underlying handle.\nConsume this Async and return the handle.\nSpawns a future onto the thread-local executor.\nConstruct a new <code>Async&lt;T&gt;</code>.\nConstruct a new Async.\nConstruct a new FlagBlock.\nAsynchronously run a read-like operation that will sleep …\nRuns executors.\nAsynchronously run an operation that will sleep if not …\nReturn a thread sync sleep operation specification for …\nReturn a thread sync sleep operation specification for …\nReturn a thread sync sleep operation specification for …\nSignal anyone waiting.\nSpawns a future onto the global executor.\nAwait a future until a timeout occurs (or that future …\nAwait a future until a timeout occurs (or that future …\nSpawns a new task and awaits and unwraps the result.\nReturn an awaitable future for the “readiness” of this …\nA future that waits on two sub-futures until the first one …\nAsynchronously run a write-like operation that will sleep …")