searchState.loadedDescShard("twizzler_rt_abi", 0, "Functions for allocating memory from the runtime.\nLow-level runtime functionality.\nFunctions for interfacing with debug info from the runtime.\nRuntime interface for file descriptors.\nFunctions for getting system information.\nRuntime interface for IO-like operations.\nInterface for objects and object handles.\nFunctions for collecting randomness.\nRuntime interface for threads.\nFunctions for interacting with the runtime’s support for …\nFlags for allocation functions.\nZero memory. The memory zeroed depends on the function …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDeallocate runtime memory pointed to by ptr, with a given …\nAllocate runtime memory with the given layout and flags. …\nReallocate runtime memory pointed to by ptr, with a given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDuplicate this descriptor. The arg argument is ignored. …\nSuccess value for twz_rt_fd_cmd.\nThis file descriptor is a terminal.\nWake all threads instead of a maximum number\nDo not block when collecting random data\nNon-blocking behavior specified. If the operation would …\nMultiplier to valid_len.\nMap with READ permission.\nMap with WRITE permission.\nMap with EXEC permission.\nInfo for compartments\nMinimal runtime info\nInfo for monitor\nThe loaded image ID for the root loaded image (usually the …\nSeek offset from current fd position\nSeek offset from end of file\nSeek offset from start of file\nZero memory during operation\nObject ID\nLoad address\nAllocation flags\nStarting argument\nNumber of arguments\nNumber of args\nPointer to args\nPointer to args\nNumber of CPUs (hardware threads)\nBasic OS information provided to rust libstd\nReturn info from rust libstd\nPointer to buffer.\nGet the monotonicity of the system monotonic clock.\nSupported monotonicity\nPointer to compartment config info\nInit information for compartments\nAn open descriptor for a runtime file handle.\nThe dl_info for this loaded image\nInformation about a loaded dynamic object\nDuration, containing seconds and nanoseconds.\nEnvironment pointer\nEnvironment pointer\nError code, or success.\nError value, or success.\nExit code type\nIf error is Success, this contains a valid descriptor.\nCommands for descriptors.\nErrors for twz_rt_fd_cmd.\nFlags a descriptor can have.\nInformation about a file descriptor.\nFlags for the descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFutex type, based on linux futex.\nFlags to get_random\nHandle, if error is set to Success.\nThread id, if err is set to Success.\nID for this handle\nThe ID for this loaded image\nObject handle\nLength of full image\nStart of full image\nPointer to the init array\nLength of init array\nPossible init info types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPossible IO errors\nInvalid descriptor\nOther error\nError during seek\nSuccess\nOperation would block, but nonblocking behavior was …\nFlags for IO operations\nResult of IO operations\nIo vec, a buffer and a len.\nPossible results of join.\nDiscrim. for init_info.\nFn ptr to _init\nLength of file name in bytes.\nLength of buffer in bytes.\nInformation about a loaded program image or library\nAn ID for a loaded program image (or library)\nPossible mapping errors\nMapping flags\nMapping flags\nResult map_object call\nPointer to object meta struct.\nInit information for minimal runtime\nSupported monotonicity levels\nFile name pointer.\nPointer to name, as a C string\nNumber of program headers\nObject handle\nPossible open error conditions.\nArgument was invalid.\nFailed to lookup provided file name.\nOther error.\nPermission denied.\nOpen success.\nInformation for opening a file.\nResult of open call.\nOptional duration.\nOptional exit code\nOptional offset. If value is FD_POS, use the file …\nPage size\nPointer to program headers\nPointer to program headers\nNumber of program headers\nObject ID\nRuntime initialization info.\nPointer to per-runtime info. The first 64-bits of this …\nArguments to spawn\nPossible spawn errors\nSpawn result.\nSize of stack to allocate\nStarting address\nPointer to start of object data.\nInformation about the system\nRuntime-internal ID of a thread\nTLS index, module ID and offset.\nAbort immediately\nDeallocate memory. If ZERO_MEMORY is set, will clear the …\nExit with provided code\nClose a file descriptor. If the file descriptor is invalid …\nPerform a command on the descriptor. The arguments arg and …\nGet information about a descriptor. If this returns true, …\nOpen a file.\nRead from a file. May read less than specified len.\nDo vectored IO read.\nWrite to a file. May write less than specified len.\nDo vectored IO write.\nSeek to a specified point in the file.\nIf *ptr == expected, wait until signal, optionally timing …\nWake up up to max threads waiting on ptr. If max is set to …\nGet a loaded image from its ID. All IDs for loaded image …\nGet time from the monotonic clock\nCollect up to len bytes of randomness, filling buf. …\nGet system information\nGet time from the system clock\nWait for a thread to exit, optionally timing out.\nAllocate memory, zeroing it first if the flag is set.\nMap an object with a given ID and flags.\nReallocate memory. If ZERO_MEMORY is set, will zero new …\nRelease an object handle. After calling this, the handle …\nSet the name of the calling thread.\nSleep the calling thread for specified duration.\nSawn a thread. On success, that thread starts executing …\nResolve the TLS index and get back the TLS data pointer.\nYield the thread now.\nNumber of valid bytes after start pointer for this object …\nReturned value, only valid if error is set to Success.\nType of whence values for seek.\nType for exit code.\nAbort execution due to unrecoverable language error.\nExit with the provided error code. If the main thread for …\nCall this after return from main, before running …\nCall this before calling main, after initializing the …\nThe entry point for the runtime. Not for public use.\nInformation about loaded image program headers.\nA loaded runtime program component, and the associated …\nLoaded image identifier.\nThe ID of the root (executable, probably) loaded image.\nLoad address\nGet the DlPhdrInfo for this loaded image.\nReturns the argument unchanged.\nGet an owned object handle for the image.\nGet the runtime ID of the loaded image.\nGet a byte slice of the image.\nCalls <code>U::from(self)</code>.\nPointer to name, as a C string\nPointer to program headers\nNumber of program headers\nReturn the LoadedImage associated with the given …\nFlags for file descriptors.\nInformation about an open file descriptor.\nThe file descriptor refers to a terminal.\nAn argument was invalid.\nLookup failed.\nPossible Open error states.\nUnclassified errror.\nPermission denied.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags for this descriptor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClose a file descriptor. If the fd is already closed, or …\nOpen a file descriptor by name, as a C-string.\nDuplicate a file descriptor.\nGet information about an open file descriptor. If the fd …\nOpen a file descriptor by name, as a Rust-string.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSystem information.\nNumber of CPUs (hardware threads)\nGet the monotonicity of the system monotonic clock.\nSupported monotonicity\nPage size\nGet information about the system.\nInvalid file descriptor.\nPossible error states for IO\nPossible flags for IO operations.\nType of an IO vec buffer and length.\nThis operation should have non-blocking semantics, …\nUnclassified error.\nFailure during seek.\nPossible seek start points and offset.\nOperation would block.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPointer to buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLength of buffer in bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead a file descriptor into a buffer, up to buf.len() …\nRead a file descriptor into a multiple buffers. On …\nWrite bytes from a buffer into a file descriptor, up to …\nWrite multiple buffers into a file descriptor. On success, …\nSeek a file descriptor, changing the internal position.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRequest EXECUTE access.\nAn argument to map was invalid\nPossible errors for mapping objects.\nFlags for mapping objects.\nThe number of u64 components that make up an object ID, if …\nSpecified object was not found\nAn object ID.\nAn object handle, granting access to object memory. An …\nUnclassified error.\nOut of resources (e.g. mapping slots)\nPermission denied\nRequest READ access.\nRequest WRITE access.\nGet a flags value with all known bits set.\nRead the raw value.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nBuild an object ID from parts, useful for syscalls.\nBuild an object handle from raw.\nGet the object ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the raw object handle.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGet map flags.\nGet a pointer to the metadata structure.\nMake a new object handle.\nBuild a new object ID from raw.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSplit the object ID into parts, useful for packing into …\nGet the raw object ID type.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a pointer to the start of object data.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMap an object given by ID <code>id</code> with the given flags.\nRelease a handle. Should be only called by the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the number of valid bytes after start pointer for …\nPossible flags to get random.\nDo not block. If the operation would block, return fewer …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFill up to buf.len() bytes of randomness into the buffer.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAtomic futex word, for a linux-like thread wait.\nType of a linux-like wait point.\nArgument was invalid.\nPossible join error states.\nThe kernel encountered an error when spawning the thread.\nA specified object was not found.\nUnclassified error.\nUnclassified error.\nPermission was denied.\nPossible spawn error types.\nRuntime-internal thread ID.\nThe specified thread was not found.\nArguments to spawn.\nThe operation timed out.\nIndex of a TLS variable.\nStarting argument\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of stack to allocate\nStarting address\nIf the futex word pointed to by <code>word</code> is equal to expected, …\nWake up up to max threads waiting on <code>word</code>. If max is None, …\nWait for a thread to exit, optionally timing out.\nSet the name of the calling thread.\nSleep the calling thread for duration <code>dur</code>.\nSpawn a thread. On success, that thread starts executing …\nGet the address of a given TLS variable.\nYield the calling thread.\nPossible monotonicities supported by the system monotonic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead the system monotonic clock.\nRead the system time.")