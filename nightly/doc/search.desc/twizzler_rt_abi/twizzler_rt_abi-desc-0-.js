searchState.loadedDescShard("twizzler_rt_abi", 0, "Contains the error value\nContains the success value\nFunctions for allocating memory from the runtime.\nLow-level runtime functionality.\nFunctions for interfacing with debug info from the runtime.\nRuntime interface for file descriptors.\nFunctions for getting system information.\nRuntime interface for IO-like operations.\nInterface for objects and object handles.\nFunctions for collecting randomness.\nRuntime interface for threads.\nFunctions for interacting with the runtime’s support for …\nFlags for allocation functions.\nZero memory. The memory zeroed depends on the function …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDeallocate runtime memory pointed to by ptr, with a given …\nAllocate runtime memory with the given layout and flags. …\nReallocate runtime memory pointed to by ptr, with a given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEntry for upcalls.\nOpen if it already exists, or create it if it doesn’t.\nOpen the file only if it already exists.\nOpen only if it doesn’t exist, and create it.\nDuplicate this descriptor. The arg argument is ignored. …\nSync the underlying storage of the file descriptor.\nTruncate the underlying storage of the file descriptor. …\nThis file descriptor is a terminal.\nWake all threads instead of a maximum number\nDo not block when collecting random data\nNon-blocking behavior specified. If the operation would …\nMultiplier to valid_len.\nAllow the runtime to provide additional safety properties.\nPersist changes on flush.\nMap with READ permission.\nMap with WRITE permission.\nMap with EXEC permission.\nOpen the file with read access.\nIf the file is a symlink, open the link instead of the …\nAlways use the end of the file as the position.\nTruncate the file on open. Requires write access.\nOpen the file with write access.\nInfo for compartments\nMinimal runtime info\nInfo for monitor\nThe loaded image ID for the root loaded image (usually the …\nSeek offset from current fd position\nSeek offset from end of file\nSeek offset from start of file\nZero memory during operation\nObject ID\nLoad address\nAllocation flags\nStarting argument\nNumber of arguments\nNumber of args\nPointer to args\nPointer to args\nNumber of CPUs (hardware threads)\nBasic OS information provided to rust libstd\nReturn info from rust libstd\nPointer to buffer.\nGet the monotonicity of the system monotonic clock.\nSupported monotonicity\nPointer to compartment config info\nInit information for compartments\nCreation options\nOptions for creating the file.\nPointer to ctor_set list\nLength of ctor_set array\nAn open descriptor for a runtime file handle.\nThe dl_info for this loaded image\nInformation about a loaded dynamic object\nDuration, containing seconds and nanoseconds.\nEndpoint addresses, for example, socket address.\nEnvironment pointer\nEnvironment pointer\nError code, or success.\nExit code type\nIf error is Success, this contains a valid descriptor.\nCommands for descriptors.\nFlags a descriptor can have.\nInformation about a file descriptor.\nKinds of underlying fd objects\nDirectory\nRegular file\nSymbolic link\nOperation flags\nFlags for the descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFutex type, based on linux futex.\nFlags to get_random\nHandle, if error is set to Success.\nThread id, if err is set to Success.\nID for this handle\nUnderlying root objid.\nThe ID for this loaded image\nObject handle\nLength of full image\nStart of full image\nPointer to the init array\nLength of init array\nPossible init info types\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContext for I/O operations.\nFlags for IO operations\nError or value\nIo vec, a buffer and a len.\nDiscrim. for init_info.\nThe kind of open/create operation. See CREATE_KIND_*.\nUnderlying fd kind\nFn ptr to _init\nLength of file name in bytes.\nLength of underlying object, or 0 if undefined.\nLength of buffer in bytes.\nInformation about a loaded program image or library\nAn ID for a loaded program image (or library)\nMapping flags\nMapping flags\nResult map_object call\nPointer to object meta struct.\nInit information for minimal runtime\nSupported monotonicity levels\nFile name pointer.\nPointer to name, as a C string\nNumber of program headers\nObject handle\nObject ID\nError or value\nInformation for opening a file.\nResult of open call.\nOptional duration.\nOptional exit code\nOptional offset. If value is FD_POS, use the file …\nPage size\nPointer to program headers\nPointer to program headers\nNumber of program headers\nError or value\nPointer to resolver\nRuntime initialization info.\nPointer to per-runtime info. The first 64-bits of this …\nArguments to spawn\nSpawn result.\nSize of stack to allocate\nStarting address\nPointer to start of object data.\nInformation about the system\nRuntime-internal ID of a thread\nA TLS desc struct, with a resolver and value\nTLS index, module ID and offset.\nAbort immediately\nCreate a new runtime (volatile, tied to this runtime) …\nSignal the runtime to prep for entry from another …\nDeallocate memory. If ZERO_MEMORY is set, will clear the …\nExit with provided code\nClose a file descriptor. If the file descriptor is invalid …\nPerform a command on the descriptor. The arguments arg and …\nEnumerate sub-names in an fd (e.g. directory entries). The …\nGet a config value for register reg.\nGet information about a descriptor. If this returns true, …\nCreate a new namespace.\nOpen a file.\nOpen a non-named file. The value pointed to by bind_info …\nRead from a file. May read less than specified len.\nRead from a file. May read less than specified len. Fill *…\nDo vectored IO read.\nWrite to a file. May write less than specified len.\nWrite to a file. May write less than specified len. Send …\nDo vectored IO write.\nRead symlink.\nRemove a name in the namespace.\nSeek to a specified point in the file.\nSet a config value for register reg. Setting a register …\nCreate a new symlink.\nGet a word and value to wait on for determining if reads …\nIf *ptr == expected, wait until signal, optionally timing …\nWake up up to max threads waiting on ptr. If max is set to …\nGet a loaded image from its ID. All IDs for loaded image …\nGet time from the monotonic clock\nGiven a pointer, find the associated object. The returned …\nCollect up to len bytes of randomness, filling buf. …\nGet system information\nGet time from the system clock\nInsert the given entry into the FOT, or return the …\nWait for a thread to exit, optionally timing out.\nGiven a pointer, find the start of the associated object. …\nAllocate memory, zeroing it first if the flag is set.\nMap an object with a given ID and flags.\nReallocate memory. If ZERO_MEMORY is set, will zero new …\nRelease an object handle. After calling this, the handle …\nResolve an FOT entry, returning an object handle for the …\nDoes the same as twz_rt_resolve_fot but optimizes for …\nSet the name of the calling thread.\nSet the handler for an upcall from kernel\nSleep the calling thread for specified duration.\nSawn a thread. On success, that thread starts executing …\nResolver for tls_desc\nResolve the TLS index and get back the TLS data pointer.\nUpdate an object handle.\nYield the thread now.\nError or value\nError or value\nNumber of valid bytes after start pointer for this object …\nValue to pass to the resolver\nType of whence values for seek.\nType for exit code.\nrt0 defines a collection of functions that the basic Rust …\nAbort execution due to unrecoverable language error.\nCalled by security context code on compartment entry\nExit with the provided error code. If the main thread for …\nCall this after return from main, before running …\nCall this before calling main, after initializing the …\nThe entry point for the runtime. Not for public use.\nEntry point for Rust code wishing to start from rt0.\nInformation about loaded image program headers.\nA loaded runtime program component, and the associated …\nLoaded image identifier.\nThe ID of the root (executable, probably) loaded image.\nLoad address\nGet the DlPhdrInfo for this loaded image.\nReturns the argument unchanged.\nGet an owned object handle for the image.\nGet the runtime ID of the loaded image.\nGet a byte slice of the image.\nCalls <code>U::from(self)</code>.\nPointer to name, as a C string\nPointer to program headers\nNumber of program headers\nReturn the LoadedImage associated with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlags for file descriptors.\nInformation about an open file descriptor.\nPossible Fd Kinds\nThe file descriptor refers to a terminal.\nAccessed time\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreated time\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags for this descriptor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nObject ID\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nKind of file\nModified time\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nLength of underlying object\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClose a file descriptor. If the fd is already closed, or …\nOpen a file descriptor by name, as a C-string.\nDuplicate a file descriptor.\nEnumerate sub-names for an fd (e.g. directory entries). …\nGet information about an open file descriptor. If the fd …\nMake a new namespace\nOpen a file descriptor by name, as a Rust-string.\nOpen an anonymous file descriptor.\nOpen an anonymous file descriptor.\nOpen an anonymous file descriptor.\nRemove a name\nMake a new symlink\nSync a file descriptor.\nTruncate a file descriptor.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnix mode\nSystem information.\nNumber of CPUs (hardware threads)\nGet the monotonicity of the system monotonic clock.\nSupported monotonicity\nPage size\nGet information about the system.\nPossible flags for IO operations.\nType of an IO vec buffer and length.\nThis operation should have non-blocking semantics, …\nPossible seek start points and offset.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPointer to buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLength of buffer in bytes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRead a file descriptor into a buffer, up to buf.len() …\nRead a file descriptor into a buffer, up to buf.len() …\nRead a file descriptor into a multiple buffers. On …\nWrite bytes from a buffer into a file descriptor, up to …\nWrite bytes from a buffer into a file descriptor, up to …\nWrite multiple buffers into a file descriptor. On success, …\nSeek a file descriptor, changing the internal position.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRequest EXECUTE access.\nExec allowed.\nUse runtime support for read stability.\nFlags for mapping objects.\nA meta extension entry.\nA tag for a meta extension entry.\nFlags for objects.\nThe core metadata that all objects share.\nThe number of u64 components that make up an object ID, if …\nA nonce for avoiding object ID collision.\nAn object ID.\nAn object handle, granting access to object memory. An …\nPersist changes on flush.\nMapping protections for mapping objects into the address …\nRequest READ access.\nRead allowed.\nRequest WRITE access.\nWrite allowed.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDefault protections\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe number of meta extensions.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFind the first metadata extension matching the given tag\nThe object flags.\nThe number of FOT entries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nBuild an object ID from parts, useful for syscalls.\nBuild an object handle from raw.\nGet the object ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the raw object handle.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe object’s public key ID.\nGet map flags.\nGet a pointer to the metadata structure.\nGet a slice of metadata extensions\nMake a new object handle.\nBuild a new object ID from raw.\nThe ID nonce.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSplit the object ID into parts, useful for packing into …\nGet the raw object ID type.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a pointer to the runtime info.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet a pointer to the start of object data.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMap an object given by ID <code>id</code> with the given flags.\nRelease a handle. Should be only called by the …\nUpdate a handle.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the number of valid bytes after start pointer for …\nA tag-specific value.\nPossible flags to get random.\nDo not block. If the operation would block, return fewer …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nFill up to buf.len() bytes of randomness into the buffer.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAtomic futex word, for a linux-like thread wait.\nType of a linux-like wait point.\nRuntime-internal thread ID.\nArguments to spawn.\nTLS desc\nIndex of a TLS variable.\nStarting argument\nPointer to resolver\nSize of stack to allocate\nStarting address\nIf the futex word pointed to by <code>word</code> is equal to expected, …\nWake up up to max threads waiting on <code>word</code>. If max is None, …\nWait for a thread to exit, optionally timing out.\nSet the name of the calling thread.\nSleep the calling thread for duration <code>dur</code>.\nSpawn a thread. On success, that thread starts executing …\nGet the address of a given TLS variable.\nYield the calling thread.\nValue to pass to the resolver\nPossible monotonicities supported by the system monotonic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead the system monotonic clock.\nRead the system time.")