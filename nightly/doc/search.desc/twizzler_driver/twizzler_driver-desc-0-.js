searchState.loadedDescShard("twizzler_driver", 0, "A handle for the root of the bus tree.\nA single manager for both a device and an associated …\nAllocate a new interrupt on this device.\nA mod for managing bus-specific functionality.\nPoll a single mailbox. If there are no messages, returns …\nGet the children of the bus tree.\nFunctions and types for managing a device.\nGet a reference to the device.\nModule for managing DMA memory, using objects for DMA, and …\nGet a reference to the event stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a handle to the root of the bus tree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new device controller from a device.\nGet the next message with a priority equal to or higher …\nA system for handling requests and organizing inflight …\nPCIe-specific functionality.\nAllocate an interrupt for a device.\nThe standard PCIe bridge header. See the PCI spec for more …\nThe standard PCIe device header. See the PCI spec for more …\nThe base struct for an info sub-object for a PCIe device.\nThe standard PCIe function header. See the PCI spec for …\nThe base struct for an info sub-object for a PCIe bus.\nPCIe-specific crate::kso::KactionGenericCmd values.\nRegister a device ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA bus. This device has numerous children and should be …\nAll supported kernel-discovered bus types.\nA handle for a device.\nA traditional “device”. It may still have children, …\nAn iterator over the children of a device.\nThe base struct for a device object.\nPossible high-level device types.\nA handle to an info subobject.\nA handle to an MMIO subobject.\nPCIe.\nThe “system” bus. Typically comprised of devices …\nAn unknown device type. Should be ignored.\nAn unknown bus. Should be ignored.\nGet the bus type of this device.\nPoll an interrupt vector to see if it has fired.\nPoll an interrupt vector to see if it has fired.\nGet an iterator over the children of this device.\nManage events for a device, including mailbox messages and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the data contained within an info type …\nGet a reference to an MMIO subobject’s info data.\nGet an indexed info object for a device.\nGet a handle to a MMIO type subobject.\nGet the base of the memory mapped IO region.\nGet the base of the memory mapped IO region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this device a bus?\nExecute a kaction operation on a device.\nConstruct a new device repr.\nRegister an interrupt vector with this device.\nGet a reference to a device’s representation data.\nGet a mutable reference to a device’s representation …\nBlock until an interrupt fires.\nA manager for device events, including interrupt handling.\nPossible errors for interrupt allocation.\nA handle for an allocated interrupt on a device.\nThe kernel encountered an error.\nThe device has run out of interrupt vectors that can be …\nSome option was unsupported.\nGet the interrupt number for programming the device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait until the next interrupt occurs.\nIntended access direction for DMA memory.\nThe memory is accessed read/write by both device and host.\nSize of a page for this DMA system.\nDMA types must implement this trait, which indicates that …\nThe memory is used for the host to read and the device to …\nA handle for an object that can be used to perform DMA, …\nOptions for DMA regions.\nA representation of some pinned memory for a region.\nA pool for allocating DMA regions that all share a common …\nA region of DMA memory, represented in virtual memory as …\nA region of DMA memory, represented in virtual memory as …\nKernel resources are exhausted.\nEnsures that memory is fully coherent.\nThe memory is used for the host to write and the device to …\nAn internal error occurred.\nPossible failure modes for pinning memory.\nEnsures coherence for the host to write to the device, …\nEnsures coherence for the device to write to the host, …\nEnsures coherence for the host to write to the device, …\nEnsures coherence for the device to write to the host, …\nMode of syncing to apply when calling <code>sync()</code>. These sync …\nRegion functions will not perform automatic coherence.\nReturn the access direction of this region.\nReturn the access direction of this region.\nGet a flags value with all known bits set.\nAllocate a new DmaRegion from the pool. The region will be …\nAllocate a new DmaSliceRegion from the pool. Each entry in …\nAllocate a new DmaSliceRegion from the pool. Each entry in …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nGenerate a default CreateSpec for use in creating Twizzler …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a reference to the DMA memory.\nGet a reference to the DMA memory.\nGet a mutable reference to the DMA memory.\nGet a mutable reference to the DMA memory.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn the number of elements in the slice that this …\nCreate a new DmaObject from an existing object handle.\nCreate a new DmaPool with access and DMA options, where …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCalculate the number of pages this region covers.\nReturn the number of bytes this region covers.\nReturn the number of bytes this region covers.\nGet a reference to the object handle.\nRelease any pin created for this region.\nRelease any pin created for this region.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAll requests completed successfully.\nAt least one error occurred. The usize value is the index …\nAt least one error occurred. The usize value is the index …\nA future for a set of in-flight requests for which we are …\nA future for a set of in-flight requests for which we are …\nThe number of IDs to have in-flight at a time.\nThe type of a request that will be used by the …\nA trait implemented by a particular driver that can the be …\nA wrapper for managing requests and responses for a given …\nThe type of a response to a request that we will use to …\nInformation about a response from the driver. Sent by the …\nA vector of responses in the same order as the submitted …\nThe request engine was shutdown while the requests were …\nThe request engine was shutdown while the requests were …\nThe type of a submit error in case submission fails.\nA wrapper around a request that adds an ID alongside a …\nA summary of the result of submitting a collection of …\nA summary of the result of submitting a collection of …\nGet a reference to the response data.\nGet a reference to the data.\nGet a mutable reference to the data.\nGet a reference to the driver.\nSend back, from the driver, to the request manager, a set …\nManually flush any internal driver submission queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the ID of the response (and thus the request with …\nGet the ID of the request. Note that this number is only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this ResponseInfo into the inner response data.\nIs this response an error?\nCheck if the requester is shutdown.\nConstruct a new request manager for a given driver.\nConstruct a new ResponseInfo.\nConstruct a new SubmitRequest.\nShutdown the request manager.\nThe actual submit function. The driver should perform …\nSubmit a set of requests, for which we are <strong>not</strong> interested …\nSubmit a set of requests, for which we <strong>are</strong> interested in …")