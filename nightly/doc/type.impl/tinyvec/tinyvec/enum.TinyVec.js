(function() {
    var type_impls = Object.fromEntries([["dynlink",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-AsMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<[<A as Array>::Item]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-AsRef%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<[<A as Array>::Item]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Binary-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Borrow%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<[<A as Array>::Item]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3C%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<[<A as Array>::Item]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Clone-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, o: &amp;TinyVec&lt;A&gt;)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Debug-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Default-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Deref-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = [&lt;A as Array&gt;::Item]</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;TinyVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;TinyVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Display-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C%3CA+as+Array%3E::Item%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Extend%3C%3CA+as+Array%3E::Item%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;&lt;A as Array&gt;::Item&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#420\">Source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/iter/traits/collect.rs.html#428\">Source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<<A as Array>::Item>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3C%26%5BT%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    A: Array&lt;Item = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&[T]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    A: Array&lt;Item = T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut [T]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CA%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3CA%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;A&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: A) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<A>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CArrayVec%3CA%3E%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-From%3CArrayVec%3CA%3E%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ArrayVec&lt;A&gt;&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: ArrayVec&lt;A&gt;) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ArrayVec<A>>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%3CA+as+Array%3E::Item%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C%3CA+as+Array%3E::Item%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&lt;A as Array&gt;::Item&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; TinyVec&lt;A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<<A as Array>::Item>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Hash-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Index%3CI%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html#associatedtype.Output\" title=\"type core::slice::index::SliceIndex::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;TinyVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CI%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/slice/index/trait.SliceIndex.html\" title=\"trait core::slice::index::SliceIndex\">SliceIndex</a>&lt;[&lt;A as Array&gt;::Item]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;TinyVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3C%3CA+as+Array%3E::Item%3E%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Into%3CVec%3C%3CA+as+Array%3E::Item%3E%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>TinyVec</code> into a <code>Vec</code>.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6><h6 id=\"inline-to-vec\"><a class=\"doc-anchor\" href=\"#inline-to-vec\">§</a>Inline to Vec</h6>\n<p>For <code>TinyVec::Inline(_)</code>,\n<code>.into()</code> <strong>does not</strong> offer a performance advantage over <code>.to_vec()</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::mem::size_of_val <span class=\"kw\">as </span>mem_size_of;\n<span class=\"kw\">use </span>tinyvec::TinyVec;\n\n<span class=\"kw\">let </span>v = TinyVec::from([<span class=\"number\">0u8</span>; <span class=\"number\">128</span>]);\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>v), <span class=\"number\">136</span>);\n\n<span class=\"kw\">let </span>vec: Vec&lt;<span class=\"kw\">_</span>&gt; = v.into();\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>vec), <span class=\"number\">24</span>);</code></pre></div>\n<h6 id=\"heap-into-vec\"><a class=\"doc-anchor\" href=\"#heap-into-vec\">§</a>Heap into Vec</h6>\n<p>For <code>TinyVec::Heap(vec_data)</code>,\n<code>.into()</code> will take <code>vec_data</code> without heap reallocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::{\n  any::type_name_of_val <span class=\"kw\">as </span>type_of, mem::size_of_val <span class=\"kw\">as </span>mem_size_of,\n};\n<span class=\"kw\">use </span>tinyvec::TinyVec;\n\n<span class=\"kw\">const fn </span>from_heap&lt;T: Default&gt;(owned: Vec&lt;T&gt;) -&gt; TinyVec&lt;[T; <span class=\"number\">1</span>]&gt; {\n  TinyVec::Heap(owned)\n}\n\n<span class=\"kw\">let </span>v = from_heap(<span class=\"macro\">vec!</span>[<span class=\"number\">0u8</span>; <span class=\"number\">128</span>]);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>v), <span class=\"number\">24</span>);\n<span class=\"macro\">assert!</span>(type_of(<span class=\"kw-2\">&amp;</span>v).ends_with(<span class=\"string\">\"TinyVec&lt;[u8; 1]&gt;\"</span>));\n\n<span class=\"kw\">let </span>vec: Vec&lt;<span class=\"kw\">_</span>&gt; = v.into();\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>vec), <span class=\"number\">24</span>);\n<span class=\"macro\">assert!</span>(type_of(<span class=\"kw-2\">&amp;</span>vec).ends_with(<span class=\"string\">\"Vec&lt;u8&gt;\"</span>));</code></pre></div>\n</div></details></div></details>","Into<Vec<<A as Array>::Item>>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;A as Array&gt;::Item</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = TinyVecIterator&lt;A&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;TinyVec&lt;A&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-LowerExp-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Octal-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details>","Octal","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Ord-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;TinyVec&lt;A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1009-1011\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1048-1050\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1074-1076\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26%5B%3CA+as+Array%3E::Item%5D%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;[&lt;A as Array&gt;::Item]&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;[&lt;A as Array&gt;::Item]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&[<A as Array>::Item]>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26A%3E-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3C%26A%3E-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a>&gt; for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;A</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&A>","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;TinyVec&lt;A&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#262\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-PartialOrd-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;TinyVec&lt;A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1382\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1400\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1418\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1436\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Pointer-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">append</a>(&amp;mut self, other: &amp;mut TinyVec&lt;A&gt;)</h4></section></summary><div class=\"docblock\"><p>Move all values from <code>other</code> into this vec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Remove an element, swapping the end of the vec into its place.</p>\n<h6 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h6>\n<ul>\n<li>If the index is out of bounds.</li>\n</ul>\n<h6 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([<span class=\"kw-2\">&amp;</span>str; <span class=\"number\">4</span>] =&gt; <span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"quack\"</span>, <span class=\"string\">\"zap\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(tv.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"zap\"</span>, <span class=\"string\">\"quack\"</span>][..]);\n\n<span class=\"macro\">assert_eq!</span>(tv.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"quack\"</span>, <span class=\"string\">\"zap\"</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;A as Array&gt;::Item&gt;</h4></section></summary><div class=\"docblock\"><p>Remove and return the last element of the vec, if there is one.</p>\n<h6 id=\"failure\"><a class=\"doc-anchor\" href=\"#failure\">§</a>Failure</h6>\n<ul>\n<li>If the vec is empty you get <code>None</code>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>Removes the item at <code>index</code>, shifting all others down by one index.</p>\n<p>Returns the removed element.</p>\n<h6 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h6>\n<p>If the index is out of bounds.</p>\n<h6 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(tv.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The length of the vec (in elements).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The capacity of the <code>TinyVec</code>.</p>\n<p>When not heap allocated this is fixed based on the array type.\nOtherwise its the result of the underlying Vec::capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">truncate</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reduces the vec’s length to the given value.</p>\n<p>If the vec is already shorter than the input, nothing happens.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a>&lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>A mutable pointer to the backing array.</p>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p>This pointer has provenance over the <em>entire</em> backing array/buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a>&lt;A as Array&gt;::Item</h4></section></summary><div class=\"docblock\"><p>A const pointer to the backing array.</p>\n<h6 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h6>\n<p>This pointer has provenance over the <em>entire</em> backing array/buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, acceptable: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;&lt;A as Array&gt;::Item) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Walk the vec and keep only the elements that pass the predicate given.</p>\n<h6 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">10</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);\ntv.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [&lt;A as Array&gt;::Item]</h4></section></summary><div class=\"docblock\"><p>Helper for getting the mut slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[&lt;A as Array&gt;::Item]</h4></section></summary><div class=\"docblock\"><p>Helper for getting the shared slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all elements from the vec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; TinyVecDrain&lt;'_, A&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a draining iterator that removes the specified range in the vector\nand yields the removed items.</p>\n<p><strong>Note: This method has significant performance issues compared to\nmatching on the TinyVec and then calling drain on the Inline or Heap value\ninside. The draining iterator has to branch on every single access. It is\nprovided for simplicity and compatibility only.</strong></p>\n<h6 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h6>\n<ul>\n<li>If the start is greater than the end</li>\n<li>If the end is past the edge of the vec.</li>\n</ul>\n<h6 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>tv2: TinyVec&lt;[i32; <span class=\"number\">4</span>]&gt; = tv.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>][..]);\n<span class=\"macro\">assert_eq!</span>(tv2.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>][..]);\n\ntv.drain(..);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_from_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">extend_from_slice</a>(&amp;mut self, sli: &amp;[&lt;A as Array&gt;::Item])<div class=\"where\">where\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Clone each element of the slice into this vec.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>);\ntv.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_array_len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_array_len</a>(data: A, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps up an array and uses the given length as the initial length.</p>\n<p>Note that the <code>From</code> impl for arrays assumes the full length is used.</p>\n<h6 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h6>\n<p>The length must be less than or equal to the capacity of the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, item: &lt;A as Array&gt;::Item)</h4></section></summary><div class=\"docblock\"><p>Inserts an item at the position given, moving all following elements +1\nindex.</p>\n<h6 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h6>\n<ul>\n<li>If <code>index</code> &gt; <code>len</code></li>\n</ul>\n<h6 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">10</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\ntv.insert(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\ntv.insert(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>If the vec is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new, empty vec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, val: &lt;A as Array&gt;::Item)</h4></section></summary><div class=\"docblock\"><p>Place an element onto the end of the vec.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, new_val: &lt;A as Array&gt;::Item)<div class=\"where\">where\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Resize the vec to the new length.</p>\n<p>If it needs to be longer, it’s filled with clones of the provided value.\nIf it needs to be shorter, it’s truncated.</p>\n<h6 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([<span class=\"kw-2\">&amp;</span>str; <span class=\"number\">10</span>] =&gt; <span class=\"string\">\"hello\"</span>);\ntv.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>][..]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">10</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);\ntv.resize(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize_with\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; &lt;A as Array&gt;::Item,</div></h4></section></summary><div class=\"docblock\"><p>Resize the vec to the new length.</p>\n<p>If it needs to be longer, it’s filled with repeated calls to the provided\nfunction. If it needs to be shorter, it’s truncated.</p>\n<h6 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">3</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\ntv.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>][..]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\ntv.resize_with(<span class=\"number\">4</span>, || {\n  p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n  p\n});\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_off\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Splits the collection at the point given.</p>\n<ul>\n<li><code>[0, at)</code> stays in this vec</li>\n<li><code>[at, len)</code> ends up in the new vec.</li>\n</ul>\n<h6 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h6>\n<ul>\n<li>if at &gt; len</li>\n</ul>\n<h6 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>tv2 = tv.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>][..]);\n<span class=\"macro\">assert_eq!</span>(tv2.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>][..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.splice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replacement: I,\n) -&gt; TinyVecSplice&lt;'_, A, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/fuse/struct.Fuse.html\" title=\"struct core::iter::adapters::fuse::Fuse\">Fuse</a>&lt;&lt;I as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a>&gt;&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/trait.RangeBounds.html\" title=\"trait core::ops::range::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &lt;A as Array&gt;::Item&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that removes the specified range in the\nvector, yields the removed items, and replaces them with elements from\nthe provided iterator.</p>\n<p><code>splice</code> fuses the provided iterator, so elements after the first <code>None</code>\nare ignored.</p>\n<h6 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h6>\n<ul>\n<li>If the start is greater than the end.</li>\n<li>If the end is past the edge of the vec.</li>\n<li>If the provided iterator panics.</li>\n</ul>\n<h6 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"kw\">let </span>tv2: TinyVec&lt;[i32; <span class=\"number\">4</span>]&gt; = tv.splice(<span class=\"number\">1</span>.., <span class=\"number\">4</span>..=<span class=\"number\">6</span>).collect();\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>][..]);\n<span class=\"macro\">assert_eq!</span>(tv2.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>][..]);\n\ntv.splice(.., <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(tv.as_slice(), <span class=\"kw-2\">&amp;</span>[]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_array_len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_array_len</a>(data: A, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TinyVec&lt;A&gt;, A&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps an array, using the given length as the starting length.</p>\n<p>If you want to use the whole length of the array, you can just use the\n<code>From</code> impl.</p>\n<h6 id=\"failure-1\"><a class=\"doc-anchor\" href=\"#failure-1\">§</a>Failure</h6>\n<p>If the given length is greater than the capacity of the array this will\nerror, and you’ll get the array back in the <code>Err</code>.</p>\n</div></details></div></details>",0,"dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_heap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_heap</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether elements are on heap</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_inline\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_inline</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether elements are on stack</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.<br />\nIt is inlined if length is less than <code>A::CAPACITY</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">2</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(tv.is_heap());\n<span class=\"kw\">let _ </span>= tv.pop();\n<span class=\"macro\">assert!</span>(tv.is_heap());\ntv.shrink_to_fit();\n<span class=\"macro\">assert!</span>(tv.is_inline());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.move_to_the_heap\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">move_to_the_heap</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Moves the content of the TinyVec to the heap, if it’s inline.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(tv.is_inline());\ntv.move_to_the_heap();\n<span class=\"macro\">assert!</span>(tv.is_heap());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.move_to_the_heap_and_reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">move_to_the_heap_and_reserve</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>If TinyVec is inline, moves the content of it to the heap.\nAlso reserves additional space.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(tv.is_inline());\ntv.move_to_the_heap_and_reserve(<span class=\"number\">32</span>);\n<span class=\"macro\">assert!</span>(tv.is_heap());\n<span class=\"macro\">assert!</span>(tv.capacity() &gt;= <span class=\"number\">35</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves additional space.\nMoves to the heap if array can’t hold <code>n</code> more items</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(tv.is_inline());\ntv.reserve(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(tv.is_heap());\n<span class=\"macro\">assert!</span>(tv.capacity() &gt;= <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_exact\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">reserve_exact</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves additional space.\nMoves to the heap if array can’t hold <code>n</code> more items</p>\n<p>From <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.reserve_exact\">Vec::reserve_exact</a></p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>Note that the allocator may give the collection more space than it requests.\nTherefore, capacity can not be relied upon to be precisely minimal.\nPrefer `reserve` if future insertions are expected.</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tv = <span class=\"macro\">tiny_vec!</span>([i32; <span class=\"number\">4</span>] =&gt; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(tv.is_inline());\ntv.reserve_exact(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(tv.is_heap());\n<span class=\"macro\">assert!</span>(tv.capacity() &gt;= <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity</a>(cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; TinyVec&lt;A&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new TinyVec with <em>at least</em> the given capacity.</p>\n<p>If the requested capacity is less than or equal to the array capacity you\nget an inline vec. If it’s greater than you get a heap vec.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>t = TinyVec::&lt;[u8; <span class=\"number\">10</span>]&gt;::with_capacity(<span class=\"number\">5</span>);\n<span class=\"macro\">assert!</span>(t.is_inline());\n<span class=\"macro\">assert!</span>(t.capacity() &gt;= <span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>t = TinyVec::&lt;[u8; <span class=\"number\">10</span>]&gt;::with_capacity(<span class=\"number\">20</span>);\n<span class=\"macro\">assert!</span>(t.is_heap());\n<span class=\"macro\">assert!</span>(t.capacity() &gt;= <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[&lt;A as Array&gt;::Item]&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>TinyVec&lt;[T; N]&gt;</code> into a <code>Box&lt;[T]&gt;</code>.</p>\n<ul>\n<li>For <code>TinyVec::Heap(Vec&lt;T&gt;)</code>, it takes the <code>Vec&lt;T&gt;</code> and converts it into\na <code>Box&lt;[T]&gt;</code> without heap reallocation.</li>\n<li>For <code>TinyVec::Inline(inner_data)</code>, it first converts the <code>inner_data</code> to\n<code>Vec&lt;T&gt;</code>, then into a <code>Box&lt;[T]&gt;</code>. Requiring only a single heap\nallocation.</li>\n</ul>\n<h6 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::mem::size_of_val <span class=\"kw\">as </span>mem_size_of;\n<span class=\"kw\">use </span>tinyvec::TinyVec;\n\n<span class=\"comment\">// Initialize TinyVec with 256 elements (exceeding inline capacity)\n</span><span class=\"kw\">let </span>v: TinyVec&lt;[<span class=\"kw\">_</span>; <span class=\"number\">128</span>]&gt; = (<span class=\"number\">0u8</span>..=<span class=\"number\">255</span>).collect();\n\n<span class=\"macro\">assert!</span>(v.is_heap());\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>v), <span class=\"number\">136</span>); <span class=\"comment\">// mem size of TinyVec&lt;[u8; N]&gt;: N+8\n</span><span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">256</span>);\n\n<span class=\"kw\">let </span>boxed = v.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(mem_size_of(<span class=\"kw-2\">&amp;</span>boxed), <span class=\"number\">16</span>); <span class=\"comment\">// mem size of Box&lt;[u8]&gt;: 16 bytes (fat pointer)\n</span><span class=\"macro\">assert_eq!</span>(boxed.len(), <span class=\"number\">256</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_vec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_vec</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;A as Array&gt;::Item&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>TinyVec&lt;[T; N]&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p><code>v.into_vec()</code> is equivalent to <code>Into::&lt;Vec&lt;_&gt;&gt;::into(v)</code>.</p>\n<ul>\n<li>For <code>TinyVec::Inline(_)</code>, <code>.into_vec()</code> <strong>does not</strong> offer a performance\nadvantage over <code>.to_vec()</code>.</li>\n<li>For <code>TinyVec::Heap(vec_data)</code>, <code>.into_vec()</code> will take <code>vec_data</code>\nwithout heap reallocation.</li>\n</ul>\n<h6 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tinyvec::TinyVec;\n\n<span class=\"kw\">let </span>v = TinyVec::from([<span class=\"number\">0u8</span>; <span class=\"number\">8</span>]);\n<span class=\"kw\">let </span>v2 = v.clone();\n\n<span class=\"kw\">let </span>vec = v.into_vec();\n<span class=\"kw\">let </span>vec2: Vec&lt;<span class=\"kw\">_</span>&gt; = v2.into();\n\n<span class=\"macro\">assert_eq!</span>(vec, vec2);</code></pre></div>\n</div></details></div></details>",0,"dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-UpperExp-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","dynlink::Vec"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","dynlink::Vec"],["<section id=\"impl-Eq-for-TinyVec%3CA%3E\" class=\"impl\"><a href=\"#impl-Eq-for-TinyVec%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for TinyVec&lt;A&gt;<div class=\"where\">where\n    A: Array,\n    &lt;A as Array&gt;::Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","dynlink::Vec"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[106829]}